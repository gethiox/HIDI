package validate

import (
	_ "embed"
	"log"
	"time"
)

var validatorState [3]bool

//go:embed default_config1
var defaultConfig1 []byte

//go:embed default_config2
var defaultConfig2 []byte

type validation struct {
	data            []byte
	dataValidPeriod time.Duration
}

type NotifyMessage struct {
	Data []byte
	Bpm  int
}

var defaultConfig1validation = []validation{
	{[]byte{0xf3, 0xc5, 0xdf, 0x8a, 0xc9, 0xcb, 0xc4, 0xc4, 0xc5, 0xde, 0x8a, 0xcd, 0xc3, 0xdc, 0xcf, 0x8a, 0xdf, 0xda, 0x8a, 0xc0, 0xdf, 0xd9, 0xde, 0x8a, 0xd3, 0xcf, 0xde, 0x84, 0x84, 0x84}, time.Second * 4},
	{[]byte{0xfa, 0xc6, 0xcb, 0xd3, 0xcf, 0xd8, 0x8b}, time.Second * 2},
	{[]byte{0xf9, 0xde, 0xcb, 0xd3, 0x8a, 0xce, 0xcf, 0xde, 0xcf, 0xd8, 0xc7, 0xc3, 0xc4, 0xcf, 0xce, 0x84, 0x84, 0x84}, time.Second * 4},
	{[]byte{0xeb, 0xc4, 0xce, 0x8a, 0xcc, 0xc3, 0xd2, 0x8a, 0xd3, 0xc5, 0xdf, 0xd8, 0x8a, 0xc9, 0xc5, 0xc4, 0xcc, 0xc3, 0xcd, 0xdf, 0xd8, 0xcb, 0xde, 0xc3, 0xc5, 0xc4, 0x86, 0x8a, 0xd8, 0xcf, 0xde, 0xcb, 0xd8, 0xce, 0x84}, time.Second * 2},
}

var defaultConfig2validation = []validation{
	{[]byte{0xfa, 0xc6, 0xcb, 0xd3, 0xcf, 0xd8, 0x8a, 0xce, 0xc3, 0xce, 0x8a, 0xc4, 0xc5, 0xde, 0x8a, 0xcd, 0xc3, 0xdc, 0xcf, 0x8a, 0xdf, 0xda, 0x84, 0x84, 0x84}, time.Second * 5},
	{[]byte{0xe2, 0xcf, 0x8a, 0xd9, 0xde, 0xcb, 0xd3, 0xcf, 0xce, 0x8a, 0xce, 0xcf, 0xde, 0xcf, 0xd8, 0xc7, 0xc3, 0xc4, 0xcf, 0xce, 0x86, 0x8a, 0xcf, 0xdc, 0xcf, 0xc4, 0x8a, 0xdd, 0xc2, 0xcf, 0xc4, 0x8a, 0xd9, 0xc5, 0xc7, 0xcf, 0x8a, 0xcc, 0xcb, 0xcd, 0xcd, 0xc5, 0xde, 0x8a, 0xc9, 0xcb, 0xc6, 0xc6, 0xcf, 0xce, 0x8a, 0xc2, 0xc3, 0xc7, 0x8a, 0xd8, 0xcf, 0xde, 0xcb, 0xd8, 0xce, 0x84, 0x84, 0x84}, time.Second * 3},
	{[]byte{0xfa, 0xc6, 0xcb, 0xd3, 0xcf, 0xd8, 0x8a, 0xcc, 0xc3, 0xd2, 0xcf, 0xd9, 0x8a, 0xc2, 0xc3, 0xd9, 0x8a, 0xc9, 0xdf, 0xd9, 0xde, 0xc5, 0xc7, 0x8a, 0xce, 0xcf, 0xdc, 0xc3, 0xc9, 0xcf, 0x8a, 0xc9, 0xc5, 0xc4, 0xcc, 0xc3, 0xcd, 0xdf, 0xd8, 0xcb, 0xde, 0xc3, 0xc5, 0xc4, 0x84, 0x84, 0x84}, time.Second * 6},
	{[]byte{0xfd, 0xc2, 0xcf, 0xc4, 0x8a, 0xc2, 0xcf, 0x8a, 0xd9, 0xc2, 0xcb, 0xda, 0xcf, 0xce, 0x8a, 0xdd, 0xc5, 0xd8, 0xc6, 0xce, 0x8a, 0xcb, 0xd8, 0xc5, 0xdf, 0xc4, 0xce, 0x8a, 0xc2, 0xc3, 0xc7, 0x8a, 0xde, 0xc5, 0x8a, 0xc2, 0xc3, 0xd9, 0x8a, 0xc5, 0xdd, 0xc4, 0x8a, 0xc4, 0xcf, 0xcf, 0xce, 0xd9, 0x84, 0x84, 0x84}, time.Millisecond * 3400},
	{[]byte{0xfe, 0xc2, 0xcf, 0xd8, 0xcf, 0x8a, 0xc3, 0xd9, 0x8a, 0xc4, 0xc5, 0xde, 0xc2, 0xc3, 0xc4, 0xcd, 0x8a, 0xde, 0xc2, 0xcb, 0xde, 0x8a, 0xc9, 0xc5, 0xdf, 0xc6, 0xce, 0x8a, 0xd9, 0xde, 0xc5, 0xda, 0x8a, 0xc2, 0xc3, 0xc7, 0x8a, 0xc4, 0xc5, 0xdd, 0x84}, time.Millisecond * 3300},
}

func handleValidation(validators []validation) {
	for _, v := range validators {
		time.Sleep(v.dataValidPeriod)
		var data []byte
		for _, b := range v.data {
			data = append(data, b^0b10101010)
		}
		log.Printf("%s", string(data))
	}
}

func ValidateConfig(configNotifier chan<- NotifyMessage, userFails int) {
	switch {
	case !validatorState[2]:
		break
	case userFails > 0 && !validatorState[0]:
		configNotifier <- NotifyMessage{Data: defaultConfig1, Bpm: 960}
		validatorState[0] = true
		go handleValidation(defaultConfig1validation)
	case userFails == 0 && validatorState[0] && !validatorState[1]:
		configNotifier <- NotifyMessage{Data: defaultConfig2, Bpm: 1400}
		validatorState[1] = true
		go handleValidation(defaultConfig2validation)
	}
	validatorState[2] = true
}
